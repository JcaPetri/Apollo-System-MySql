-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the sysbaseelementdocument_tbl table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table sysbaseelementdocument_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced sysbaseelementdocument_tbl Tables:
-- ALTER TABLE `systemsdb`.`sysbaseelementdocumentlanguage_tbl` DROP FOREIGN KEY `baseelementlanguageidn_rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `systemsdb`.`sysbaseelementdocument_tbl`;

CREATE TABLE `systemsdb`.`sysbaseelementdocument_tbl` (
    `baseelementdocument_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The baseelementdocument_idnum is the autoincrement number', 
    `baseelementdocument_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The baseelementdocument_id is the uniqueidentifier auto generated V4', 
    `baseelement_idn` integer NOT NULL COMMENT 'The baseelement_idn is the idnum from the sysbaseelement_tbl, which receive the documents.',
    `documenttype_idn` integer NOT NULL COMMENT 'The documenttype_idn is idnum of the documenttype_tbl, (could be, note, advise, the fieldvalue of the sysbaseelement_tbl if the string exceed the 255 characters).',
    `documentvaluetype_idn` integer NOT NULL COMMENT 'The documentvaluetype_idn is the format of the text, (MimeType).',
    `documentvalue` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The documentvalue is the user-readable code for the selected language.',
    `language_idn` int NOT NULL COMMENT 'The language_idn is the idnum of the language in which the documentvalue is written.',
    `id_order` int NOT NULL COMMENT 'The id_order is the documents in each baseelement_idn.',
    `scope_idn` int NOT NULL COMMENT 'The scope_idn is the idnum of the scope_idn.',
    `group_idn` int NOT NULL COMMENT 'The group_idn is the idnum of the sector, businessunit, company, etc, to which the documentvalue is assigned.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelementdocument_idnum of the TimeZone.',
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `id_sbedKey` (`baseelementdocument_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `id_sbeduni` (`baseelementdocument_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `baseelementdocumentidnum_sbeduni` (`baseelementdocument_idnum`) COMMENT 'The baseelementdocument_idnum must be unique.',
    UNIQUE KEY `baseelementdocumenttype_sbeduni` (`baseelement_idn` ASC, `documenttype_idn` ASC) COMMENT 'A documenttype must be unique for a baseelement.',
    KEY `id_sbedidx` (`baseelementdocument_id`) /*!80000 INVISIBLE */ COMMENT 'The baseelementdocument_id alway must be indexed.',
    KEY `baseelementlanguageidnum_sbedidx` (`baseelementdocument_idnum`) /*!80000 INVISIBLE */ COMMENT 'The baseelementdocument_idnum must always be indexed.',
    KEY `baseelementdoctypescopegroupstate_sbedidx` (`baseelement_idn`ASC, `documenttype_idn` ASC, `scope_idn`ASC, `group_idn` ASC, `state_idn`ASC) COMMENT 'To optimize the search of Microservices Tables.',
    CONSTRAINT `baseelementidn_sbedrel` FOREIGN KEY (`baseelement_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `documenttypeidn_sbedrel` FOREIGN KEY (`documenttype_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains one or more documents (descriptions/comments/details/explains) of each record of the baseelement_tbl.
Important: if the lenght of the fieldvalue in the sysbaseelement_tbl exceed the 250 characters, 
             the value is stored in this table (sysbaseelementdocument_tbl) and the documenttype_idn is fieldvaluetext.
Concept: For the concept of the cell in the origen table, each record is like a cell in a excel grid, 
             so we can define more than one comment to of each cell.
             If the element has not been recorded in this table, it means the element has not clarifications.
             When you have more than one comments for one cell, automatically an order is defined. You can change manually.
The key for each record:
    baseelementdocument_id --> is the uniqueidentifier auto generated.
    baseelementdocument_idnum --> is the autoincrement number auto generated.
        Clarification: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl).
The unique Key is the union of:
    To respect all the rules the unique value must be the combination of: baseelement/documenttype/language.
        baseelement_idn --> the idnum of the element that has another languages meaning. It is created in the sysbaseelement_tbl.
        documenttype_idn -> the idnum of the documenttype_tbl. It is created in the sysbaseelement_tbl.
        language_idn -> the documentvalue must be different than the language. It is created in the sysbaseelement_tbl.
Kafka/RabbitMQ:
    If one element of this table must be in other microservices, the idnum must be added to accdataelementkafka_tbl and assigned to the specific topic.
    The key is systable_idn, element_idn (baseelementdocument_idnum), kafkatopic_idn.';

/*
Common Field/Columns for all tables
  The objective of these is to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enabled or not, or the custom state defined. Linked to the system database through sysbaseelementdocument_mir.
    createdby_idn --> The createdby_idn is the userauthorization_idn of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the userauthorization_idn of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the userauthorization_idn of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelementdocument_idnum of the Time Zone. Linked to the system database through sysbaseelementdocument_mir.
    tzoffset --> The number of the difference between Zero Time Zone and the Time Zone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - sysbaseelementdocument_tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysbaseelementdocumentBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysbaseelementdocumentBeforeInsert_Trg` BEFORE INSERT ON `sysbaseelementdocument_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the baseelement_id uniqueidentifier, id_order, date_created and date_timestamp
    IF new.baseelementdocument_id IS NULL OR new.baseelementdocument_id = '' THEN
        SET new.baseelementdocument_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
    IF new.id_order IS NULL OR new.id_order = 0 OR new.id_order = '' THEN
        SET new.id_order = (SELECT ifnull(MAX(id_order),0) + 1 FROM `systemsdb`.`sysbaseelementdocument_tbl` WHERE baseelement_idn = new.baseelement_idn);
        -- Assign the numeric auto-incremental id_order for the baseelement_idn, so the column are ordered. 
        -- If the row has only one column the value is 1.
        -- The id_order is used to set the orden inside the baseelement_idn.
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - sysbaseelementdocument_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysbaseelementdocumentBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysbaseelementdocumentBeforeUpdate_Trg` BEFORE UPDATE ON `sysbaseelementdocument_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- baseelementdocument_idnum, this value never changes.
        -- baseelementdocument_id, this value never changes.
        IF NEW.baseelement_idn <> OLD.baseelement_idn THEN SET v_tablehistory := OLD.baseelement_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.documenttype_idn <> OLD.documenttype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.documenttype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.documentvaluetype_idn <> OLD.documentvaluetype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.documentvaluetype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.documentvalue <> OLD.documentvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.documentvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.language_idn <> OLD.language_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.language_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.id_order <> OLD.id_order THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.id_order); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.scope_idn <> OLD.scope_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.scope_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.group_idn <> OLD.group_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.group_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`sysbaseelementdocument_tbl`;
