-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysEntityStructures_Tbl table
/*Contains the system structure. In this table you build the tables and java entities structures, with thiers column and fields.
You must define all the properties of the entities.
The key for each record:
	ID		--> is the uniqueidentifier auto generated.
	IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
	FieldIDn 		--> The FieldIDn is the IDNum of the field/column of the entity. Link with the SysBaseElements_Tbl.
	EntityIDn 		--> The EntityIDn is the IDNum of the entity. Link with the SysBaseElements_Tbl.
	MicroserviceIDn --> the IdNum of the Microservice that the Field and Entity belong. When is equal System, all microservices hava access to them.
	BusinessUnitID	--> the IdNum of the BusinessUnit that the Field and Entity and Microservice belong.		 
	When an entity is selected from the Entity_Tbl, the Microservice is set, this parameter define the possible fields to be selected.
Common Field/Columns for all tables
	The objective of these are to store critical information for the system and the record history.
		StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
		CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
		LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
		OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
		DateCreated			--> The DateCreated is the record creation datetime UTC.
		DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
		TableHistory		-->	The TableHistory contain then change history of each column.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First Delete the table SysEntityStructures_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced baseelement_tbl Tables:
-- ALTER TABLE `systemsdb`.`baseelement_tbllanguage`  DROP FOREIGN KEY `BaseElementLanguageIDnBel`;

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Second create the SysEntityStructures_Tbl table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysEntityStructures_Tbl
DROP TABLE IF EXISTS `systemsdb`.`SysEntityStructures_Tbl`;

CREATE TABLE `SysEntityStructures_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
      `FieldIDn` int NOT NULL COMMENT 'The FieldIDn is the IDNum of the field/column of the entity. Link with the SysEntityFields_Tbl.',
	  `EntityIDn` integer NOT NULL COMMENT 'The EntityIDn is the IDNum of the entity. Link with the SysEntities_Tbl. The entity is set to a microservice and business unit.',
      `MicroserviceIDn` int NOT NULL COMMENT 'The MicroServiceIDn is the IdNum of the Microservice to which the IDName is assigned.',
	  `DataTypeIDn` integer NOT NULL COMMENT 'The DataTypeIDn is the IDNum of the type of data that you can enter in the field. Link with the SysBaseElements_Tbl.',
      `FieldOrder` integer NOT NULL COMMENT 'The FieldOrder is an ascendent number to order the fields/columns. If the user don`t define, the system insert an autonumeric increment number.',
      `AdmitDefaultValue` boolean NOT NULL COMMENT 'The AdmitDefaultValue, if the value is 1 the field admit the default value, otherwise not. This is to facilitate data insertion.',
      `FieldNotNull` boolean NOT NULL COMMENT 'The FieldNotNull, if the value is 1 the field can`t be null, otherwise the null value is allowed.',
	  `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `IDNum_SesPrikey` (`IDNum`) COMMENT 'The sequence SysEntityStructures_Tbl generate the nextval',
	  UNIQUE KEY `ID_SesUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The uniqueidentifier.',
	  UNIQUE KEY `IDNum_SesUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  UNIQUE KEY `IDnFieldEntMicro_SefUnique` (`FieldIDn`,`EntityIDn`,`MicroserviceIDn`) COMMENT 'The Field must be unique for one Entity, Microservice.',
	  KEY `ID_SefIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID must always be indexed.',
      KEY `IDNum_SefIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
      KEY `FieldEntMicrBusUnit_SefIdx` (`FieldIDn` ASC, `EntityIDn` ASC, `MicroserviceIDn` ASC) VISIBLE COMMENT 'To optimize the search of one fields for an Entity.',
	  CONSTRAINT `FieldIDn_Rel` FOREIGN KEY (`FieldIDn`) REFERENCES `systemsdb`.`SysBaseElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE,
	  CONSTRAINT `EntityIDn_Rel` FOREIGN KEY (`EntityIDn`) REFERENCES `systemsdb`.`SysBaseElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE,
	  CONSTRAINT `MicroserviceIDn_Rel` FOREIGN KEY (`MicroserviceIDn`) REFERENCES `systemsdb`.`SysMicroservices_Tbl` (`MicroserviceIDn`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the system structure. In this table you build the tables and java entities structures, with thiers column and fields.
You must define all the properties of the entities.
The key for each record:
	ID		--> is the uniqueidentifier auto generated.
	IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
	FieldIDn 		--> The FieldIDn is the IDNum of the field/column of the entity. Link with the SysBaseElements_Tbl.
	EntityIDn 		--> The EntityIDn is the IDNum of the entity. Link with the SysBaseElements_Tbl.
	MicroserviceIDn --> the IdNum of the Microservice that the Field and Entity belong. When is equal System, all microservices hava access to them.
	BusinessUnitID	--> the IdNum of the BusinessUnit that the Field and Entity and Microservice belong.		 
	When an entity is selected from the Entity_Tbl, the Microservice is set, this parameter define the possible fields to be selected.
Common Field/Columns for all tables
	The objective of these are to store critical information for the system and the record history.
		StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
		CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
		LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
		OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
		DateCreated			--> The DateCreated is the record creation datetime UTC.
		DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
		TableHistory		-->	The TableHistory contain then change history of each column.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - SysEntityStructures_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysEntityStructuresBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysEntityStructuresBeforeInsert_Trg` BEFORE INSERT ON `SysEntityStructures_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Define the UniqueIdentifier Value
	END IF;
	-- Set the FieldOrder
	IF NEW.FieldOrder IS NULL THEN 
		NEW.FieldOrder := (SELECT COALESCE(MAX(FieldOrder),0) + 1 FROM `systemsdb`.`SysEntityStructures_Tbl` WHERE EntityIDn = NEW.EntityIDn);
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - SysEntityStructures_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysEntityStructuresBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysEntityStructuresBeforeUpdate_Trg` BEFORE UPDATE ON `SysEntityStructures_Tbl` FOR EACH ROW BEGIN
	-- Create the function to set the new datetimestamp and the history of the record.
	-- This funtion is used by the SysEntityStructures_Tbl table before update trigger.
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
        IF NEW.FieldIDn <> OLD.FieldIDn THEN SET v_TableHistory := OLD.FieldIDn; ELSE SET v_TableHistory := '†'; END IF;
		IF NEW.EntityIDn <> OLD.EntityIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.EntityIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.MicroserviceIDn <> OLD.MicroserviceIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.MicroserviceIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DataTypeIDn <> OLD.DataTypeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.DataTypeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.FieldOrder <> OLD.FieldOrder THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.FieldOrder); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.AdmitDefaultValue <> OLD.AdmitDefaultValue THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.AdmitDefaultValue); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.FieldNotNull <> OLD.FieldNotNull THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.FieldNotNull); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`SysEntityStructures_Tbl`;
