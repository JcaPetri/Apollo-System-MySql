-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysFields_Tli table
/*This is a List Table that contains the fields or the columns of the system. Enable the IDNum element to a Microservice.
The fields exits to the Microservice, since you create it in this table. The information, of what are they, are in the SysBaseElement_Tbl table.
The key for each record:
	ID		--> is the uniqueidentifier auto generated.
	IDNum	--> is the autoincrement number auto generated.
	This table has its own key only for update it.
	The system does not use this key because, here we only enable one field/column to a Microservice.
The unique Key is the union of:
	FieldIDn 		--> The FieldIDn is the IDNum of the field. Link with the diccionary table - SysBaseElement.
	MicroserviceIDn --> The MicroserviceIDn is the IDNum of the microservice to which the field belongs. If its value is System all microservices have access to it.
Common Field/Columns for all tables
	The objective of these are to store critical information for the system and the record history.
		StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
		CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
		LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
		OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
		DateCreated			--> The DateCreated is the record creation datetime UTC.
		DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
		TableHistory		-->	The TableHistory contain then change history of each column.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First Delete the table SysFields_Tli if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced SysBaseElements_Tbl Tables:
-- ALTER TABLE `systemsdb`.`SysBaseElements_Tbllanguage`  DROP FOREIGN KEY `BaseElementLanguageIDnBel`;

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Second create the SysFields_Tli table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysFields_Tli
DROP TABLE IF EXISTS `systemsdb`.`SysFields_Tli`;

CREATE TABLE `SysFields_Tli` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
      `FieldIDn` int NOT NULL COMMENT 'The FieldIDn is the IDNum of the field. Link with the diccionary table - SysBaseElement.',
      `FieldTypeIDn` int NOT NULL COMMENT 'The FieldTypeIDn is the IDNum of the field type, Column or Field. Link with the diccionary table - SysBaseElement.',
      `MicroserviceIDn` int NOT NULL COMMENT 'The MicroServiceIDn is the IdNum of the Microservice to which the IDName is assigned.',
      `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `IDNum_SfiPrikey` (`IDNum`) COMMENT 'The sequence SysFields_Tli generate the nextval',
	  UNIQUE KEY `ID_SfiUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The uniqueidentifier.',
	  UNIQUE KEY `IDNum_SfiUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  UNIQUE KEY `IDnFieldMicroServ_SfiUnique` (`FieldIDn`,`MicroserviceIDn`) COMMENT 'The IDNum must be unique for the Microservice.',
	  KEY `ID_SfiIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID must always be indexed.',
      KEY `IDNum_SfiIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
      KEY `FieldMicroServ_SfiIdx` (`FieldIDn` ASC, `MicroserviceIDn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Microservices Tables.',
	  CONSTRAINT `FieldIDn_SfiRel` FOREIGN KEY (`FieldIDn`) REFERENCES `systemsdb`.`SysBaseElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE,
	  CONSTRAINT `MicroserviceIDn_SfiRel` FOREIGN KEY (`MicroserviceIDn`) REFERENCES `systemsdb`.`SysMicroservices_Tbl` (`MicroserviceIDn`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='This is a List Table that contains the fields or the columns of the system. Enable the IDNum element to a Microservice.
The fields exits to the Microservice, since you create it in this table. The information, of what are they, are in the SysBaseElement_Tbl table.
The key for each record:
	ID		--> is the uniqueidentifier auto generated.
	IDNum	--> is the autoincrement number auto generated.
	This table has its own key only for update it.
	The system does not use this key because, here we only enable one field/column to a Microservice.
The unique Key is the union of:
	FieldIDn 		--> The FieldIDn is the IDNum of the field. Link with the diccionary table - SysBaseElement.
	MicroserviceIDn --> The MicroserviceIDn is the IDNum of the microservice to which the field belongs. If its value is System all microservices have access to it.
Common Field/Columns for all tables
	The objective of these are to store critical information for the system and the record history.
		StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
		CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
		LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
		OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
		DateCreated			--> The DateCreated is the record creation datetime UTC.
		DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
		TableHistory		-->	The TableHistory contain then change history of each column.';


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - SysFields_Tli
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysFieldsBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysFieldsBeforeInsert_Trg` BEFORE INSERT ON `SysFields_Tli` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Define the UniqueIdentifier Value
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - SysFields_Tli
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysFieldsBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysFieldsBeforeUpdate_Trg` BEFORE UPDATE ON `SysFields_Tli` FOR EACH ROW BEGIN
	-- Create the function to set the new datetimestamp and the history of the record.
	-- This funtion is used by the SysFields_Tli table before update trigger.
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
        IF NEW.FieldIDn <> OLD.FieldIDn THEN SET v_TableHistory := OLD.FieldIDn; ELSE SET v_TableHistory := '†'; END IF;
        IF NEW.FieldTypeIDn <> OLD.FieldTypeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.FieldTypeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.MicroserviceIDn <> OLD.MicroserviceIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.MicroserviceIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`SysFields_Tli`;
