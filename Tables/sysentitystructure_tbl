-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the sysentitystructure_tbl table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table sysentitystructure_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced sysentitystructure_tbl Tables:
-- ALTER TABLE `systemsdb`.`SysMicroservices_tbl`  DROP FOREIGN KEY `microservice_idn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `systemsdb`.`sysentitystructure_tbl`;

CREATE TABLE `systemsdb`.`sysentitystructure_tbl` (
    `entitystructure_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The entitystructure_idnum is the autoincrement number', 
    `entitystructure_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The entitystructure_id is the uniqueidentifier auto generated V4', 
    `field_idn` integer NOT NULL COMMENT 'The field_idn is the idnum of the field/column of the entity. Link with the sysbaseelement_tbl.',
    `fieldorder` integer NOT NULL COMMENT 'The fieldorder is an ascendent number to order the fields/columns. If the user don`t define, the system insert an autonumeric increment number.',
    `entity_idn` integer NOT NULL COMMENT 'The entity_idn is the idnum of the entity. Link with the sysbaseelement_tbl.',
    `entitytype_idn` integer NOT NULL COMMENT 'The entitytype_idn is the idnum of the type table, could be real or virtual table. Link with the sysbaseelement_tbl.',
    `microservice_idn` integer NOT NULL COMMENT 'The microservice_idn is the idnum of the Microservice that the Entity and Field belong. When is equal System, all microservices hava access to them.',
    `fieldis_nullable` boolean NOT NULL COMMENT 'The fieldnotnull, if the value is 1 the field can`t be null, otherwise the null value is allowed.',
    `admitdefaultvalue` boolean NOT NULL COMMENT 'The admitdefaultvalue, if the value is 1 the field admit the default value, otherwise not. This is to facilitate data insertion.',
    `defaultvalueversion_idn` integer COMMENT 'The defaultvaluevesion_idn, is the idnum of the EntityStructureDefaultValue table, contain the system default value. Link with the sysbaseelement_tbl.',
    `dataorigentype_idn` integer NOT NULL COMMENT 'The dataorigentype_idn, is the idnum of the DataOrigenType table, this could be 2781 Database, 2782 Function, 2783 User, 2784 DefaultTable. Link with the sysbaseelement_tbl.',
    `dataorigen_idn` integer NOT NULL COMMENT 'The dataorigen_idn, is the idnum of the DataOrigen table, this could be a script, function, userdata, etc. Link with the sysbaseelement_tbl.',
    `targettable_idn` integer NOT NULL COMMENT 'The targettable_idn is the idnum of the table that are going to receive the data. Link with the sysbaseelement_tbl.',
    `targetfield_idn` integer NOT NULL COMMENT 'The targetfield_idn is the idnum of the field that are going to receive the data. Link with the sysbaseelement_tbl.',
    `fieldcomment_idn` integer NOT NULL COMMENT 'The comment is the explanation of the field used.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysfield_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `entitystructureidnum_seskey` (`entitystructure_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `entitystructureidnum_sesuni` (`entitystructure_idnum`) COMMENT 'The entitystructure_idnum must be unique.',
    KEY `entitystructureidnum_sesidx` (`entitystructure_idnum`) /*!80000 INVISIBLE */ COMMENT 'The entitystructure_idnum must always be indexed.',
    UNIQUE KEY `entitystructureid_sesuni` (`entitystructure_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `entitystructureid_sesidx` (`entitystructure_id`) /*!80000 INVISIBLE */ COMMENT 'The entitystructure_id alway must be indexed.',
    UNIQUE KEY `microentityfield_sesuni` (`field_idn`, `entity_idn`, `microservice_idn`) COMMENT 'The field must be unique for the entity and microservice.',
    KEY `microentityfield_sdeidx` (`field_idn` ASC, `entity_idn` ASC, `microservice_idn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Tables.',
    CONSTRAINT `fieldidn_sesrel` FOREIGN KEY (`field_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `entityidn_sesrel` FOREIGN KEY (`entity_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `microserviceidn_sesrel` FOREIGN KEY (`microservice_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the structure of the system. 
Concept: In this table you build the tables and java entity structures, with their columns and fields.
             You must define all the properties of the entities.
             The target table is physical or real table where the datas are stored. 
             When you receive a CRUD, you need to know in wich real table are stored the data, to make the request.
The key for each record:
    entitystructure_idnum --> is the autoincrement number auto generated.
    entitystructure_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    field_idn --> The field_idn is the idnum of the field/column of the entity. Link with the sysbaseelement_tbl.
    entity_idn --> The entity_idn is the idnum of the entity. Link with the sysbaseelement_tbl.
    microservice_idn --> The microservice_idn is the idnum of the Microservice that the Entity and Field belong. When is equal System, all microservices hava access to them.
    When an entity is selected from the entity_tbl, the Microservice is set, this parameter define the possible fields to be selected.
    Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl).';

/*
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysfield_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - sysentitystructure_tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysentitystructureBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysentitystructureBeforeInsert_Trg` BEFORE INSERT ON `sysentitystructure_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
    IF new.entitystructure_id IS NULL OR new.entitystructure_id = '' THEN
        SET new.entitystructure_id = uuid();    -- Set the UniqueIdentifier Value
    END IF;
    IF new.fieldorder IS NULL OR new.fieldorder = 0 OR new.fieldorder = '' THEN
        SET NEW.fieldorder := (SELECT COALESCE(MAX(fieldorder),0) + 1 FROM `systemsdb`.`SysEntityStructures_Tbl` WHERE EntityIDn = NEW.entity_idn AND microservice_idn = NEW.microservice_idn);
        -- Assign the numeric auto-incremental id_order for this field_idn.
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - sysentitystructure_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysentitystructureBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysentitystructureBeforeUpdate_Trg` BEFORE UPDATE ON `sysentitystructure_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- entitystructure_idnum, this value never changes.
        -- entitystructure_id, this value never changes.
        IF NEW.field_idn <> OLD.field_idn THEN SET v_tablehistory := OLD.field_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.fieldorder <> OLD.fieldorder THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldorder); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.entity_idn <> OLD.entity_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.entity_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.entitytype_idn <> OLD.entitytype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.entitytype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.microservice_idn <> OLD.microservice_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.microservice_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.fieldis_nullable <> OLD.fieldis_nullable THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldis_nullable); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.admitdefaultvalue <> OLD.admitdefaultvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.admitdefaultvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.defaultvalueversion_idn <> OLD.defaultvalueversion_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.defaultvalueversion_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.dataorigentype_idn <> OLD.dataorigentype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.dataorigentype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.dataorigen_idn <> OLD.dataorigen_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.dataorigen_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.targettable_idn <> OLD.targettable_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.targettable_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.targetfield_idn <> OLD.targetfield_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.targetfield_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.fieldcomment_idn <> OLD.fieldcomment_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldcomment_idn; ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`sysentitystructure_tbl`;
