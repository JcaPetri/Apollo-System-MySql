-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the sysentitystructureproperty_tbl table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table sysentitystructureproperty_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced sysentitystructureproperty_tbl Tables:
-- ALTER TABLE `systemsdb`.`SysMicroservices_tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `systemsdb`.`sysentitystructureproperty_tbl`;

CREATE TABLE `systemsdb`.`sysentitystructureproperty_tbl` (
    `entitystructureproperty_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The entitystructureproperty_idnum is the autoincrement number', 
    `entitystructureproperty_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The entitystructureproperty_id is the uniqueidentifier auto generated V4', 
    `entitystructure_idn` integer NOT NULL COMMENT 'The entitystructure_idn is the idnum of the entity structure (microservice/table/field). Link with the sysentitystructure_tbl.',
    `fieldproperty_idn` int NOT NULL COMMENT 'The fieldproperty_idn is the idnum of the field property. Link with the sysbaseelement_tbl.',
    `fieldvaluetype_idn` integer NOT NULL COMMENT 'The fieldvaluetype_idn is the idnum of the value type (idnum, numeric, text, etc). Its come from the sysbaseelement_tbl). When the fieldvaluetype is idnum, the value of the fieldvalue is a references of the sysbaseelement_tbl.',
    `fieldvalue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The fieldvalue is a numeric/text/multivalue/css/javascript/etc value of the property, this value is not standar and canÂ´t be multilanguage. If the value is an idnumtype, the meaning is in the sysentitystructure_tbl.',
    `fieldorder` integer NOT NULL COMMENT 'The fieldorder is an ascendent number to order the fields/columns. If the user don`t define, the system insert an autonumeric increment number.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `entitystructurepropertyidnum_sespkey` (`entitystructureproperty_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `entitystructurepropertyidnum_sespuni` (`entitystructureproperty_idnum`) COMMENT 'The entitystructureproperty_idnum must be unique.',
    KEY `entitystructurepropertyidnum_sespidx` (`entitystructureproperty_idnum`) /*!80000 INVISIBLE */ COMMENT 'The entitystructureproperty_idnum must always be indexed.',
    UNIQUE KEY `entitystructurepropertyid_sespuni` (`entitystructureproperty_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `entitystructurepropertyid_sespidx` (`entitystructureproperty_id`) /*!80000 INVISIBLE */ COMMENT 'The entitystructureproperty_id alway must be indexed.',
    UNIQUE KEY `entitystrufielprop_sespuni` (`entitystructure_idn`, `fieldproperty_idn`) COMMENT 'The fieldproperty_idn can be one time in each structure (microservice/table/field).',
    KEY `entitystrufielprop_sespidx` (`fieldproperty_idn` ASC, `entitystructure_idn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Tables.',
    CONSTRAINT `entitystructureidn_sesprel` FOREIGN KEY (`entitystructure_idn`) REFERENCES `systemsdb`.`sysentitystructure_tbl` (`entitystructure_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `fieldpropertyidn_sesprel` FOREIGN KEY (`fieldproperty_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the properties of each column/table or field/entity.
Concept: 
    Tbl_1- Each field/column can have many properties, like DataType, Lenght, IsPrimaryKey, IsNotNull, etc.
    Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl).
The key for each row/record:
    entitystructureproperty_idnum --> is the autoincrement number auto generated, all the relation between tables are maded by this column.
    entitystructureproperty_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    entitystructure_idn --> The entitystructure_idn is the idnum of the sysentitystructure_tbl (microservice/table/field). Link with the SysEntityStructure_Tbl.
    fieldproperty_idn --> The fieldproperty_idn is the idnum of the field property type. Link with the sysbaseelement_tbl.
        unique = One fieldproperty_idn can be one time for each entitystructure_idn.';
/*
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.

The table operation:
    To enter the data, you need the combination of two field, they are:
        entitystructure_idn --> The entitystructure_idn is the idnum of the entity structure (Microservice + Entity + Field). Link with the sysentitystructure_tbl.
        fieldproperty_idn --> The fieldproperty_idn is the idnum of the field property (DataType, Length, IsNotNull, etc). Link with the sysbaseelement_tbl.
        fieldvaluetype_idn --> The fieldvaluetype_idn is the idnum of the value type (number, text, idnumtype). Link with the sysbaseelement_tbl.
        fieldvalue --> The fieldvalue is a numeric/text/etc value of the property, this value is not standard and can not be multilanguage.
                                If the value is an idnumtype, the meaning of it, is in the sysbaseelment_tbl.

    Example: You have a Name column. You can set the datatype as string, and the length of the string in 20.
        First you add one record to define the datatype.
            entitystructure_idn = idnum, represent Entity Person, Column = StateIDn. Link with the sysbaseelment_tbl.
            fieldproperty_idn = idnum, represent DataType, the property of the field. Link with the sysbaseelment_tbl.
            fieldvaluetype_idn = idnum, represent table state data type. Link with the sysbaseelment_tbl.
            fieldvalue = 372, idnum, represent enable value. Link with the sysbaseelment_tbl.
        Second you add another record to define the lenght.
            entitystructure_idn = idnum, represent Entity Person, Column = StateIDn. Link with the sysbaseelment_tbl.
            fieldproperty_idn = idnum, represent Length, the property of the field. Link with the sysbaseelment_tbl.
            fieldvaluetype_idn = idnum, represent smallint, the value of the FieldValue is numeric. Link with the sysbaseelment_tbl.
            fieldvalue = 20, is the max length of the column. This value are not linked with anythings.
*/

/*
-- Fields that the user cant't modify
    -- System fields, this fields are defined by the Database or Java system, the user can't modify them.
        260	  id => the uniqueidentifier key of each table.
        261	  idnum => the autonumeric key of each table.
        364	  createdy_idn => the user/group that create the record.
        365	  lastmodifiedby_idn => the user/group that modified the last time the record.
        366	  ownedby_idn => the user/group group owner of the record.
        367	  date_created => the created daytime
        368	  date_timestamp => the last modifier datetime
        371  table_history => the history of the record.

    -- System fields, the user can modify them, but should avoid it.
    363   state_idn

-- FieldPropertyIDn
    The field property define the types of properties that have the field/column.
        37   FieldPropertyType -- Scope = 3
    DataType
        400	     DataTypeMySql
        401	     DataTypeJava
        402     DataTypeCustom
                  javascript
        2148   IsPrimaryKey --> is a boolean type, 1 = true / 0 = false
        2149   IsNotNull --> is a boolean type, 1 = true / 0 = false
        2150   IsIndex --> is a boolean type, 1 = true / 0 = false
        2151   IsBinary --> is a boolean type, 1 = true / 0 = false
        2152   IsAutoIncremental --> is a boolean type, 1 = true / 0 = false
        2153   IsGeneratedField --> is a boolean type, 1 = true / 0 = false
        2154   IsSystemGenerated --> is a boolean type, 1 = true / 0 = false
	    IsOptionalField --> is a boolean type, 1 = true / 0 = false
	    etc.

-- If you want to set a field list, you must to combine some propertytypes
   Ejemplo:	Field		PropertyType		PropertyValue
   ID			DataType			text
   ID			ListBox				IDNum of the list (Red/Blue/etc)
	The list can be exclusive, or the user can enter his own values
*/

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - sysentitystructureproperty_tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysentitystructurepropertyBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysentitystructurepropertyBeforeInsert_Trg` BEFORE INSERT ON `sysentitystructureproperty_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
    IF new.entitystructureproperty_id IS NULL OR new.entitystructureproperty_id = '' THEN
        SET new.entitystructureproperty_id = uuid();    -- Set the UniqueIdentifier Value
    END IF;
    IF new.fieldorder IS NULL OR new.fieldorder = 0 OR new.fieldorder = '' THEN
        SET new.fieldorder = (SELECT ifnull(MAX(fieldorder),0) + 1 FROM `systemsdb`.`sysentitystructureproperty_tbl` WHERE entitystructure_idn = new.entitystructure_idn);
        -- Assign the numeric auto-incremental id_order for this baseelement_idn.
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - sysentitystructureproperty_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysentitystructurepropertyBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysentitystructurepropertyBeforeUpdate_Trg` BEFORE UPDATE ON `sysentitystructureproperty_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- entitystructureproperty_idnum, this value never changes.
        -- entitystructureproperty_id, this value never changes.
        IF NEW.entitystructure_idn <> OLD.entitystructure_idn THEN SET v_tablehistory := OLD.entitystructure_idn; ELSE SET v_tablehistory := 'â '; END IF;
        IF NEW.fieldproperty_idn <> OLD.fieldproperty_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldproperty_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.fieldvaluetype_idn <> OLD.fieldvaluetype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldvaluetype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.fieldvalue <> OLD.fieldvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.fieldorder <> OLD.fieldorder THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldorder); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'â ',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'â '); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'â ',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'â¡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`sysentitystructureproperty_tbl`;
