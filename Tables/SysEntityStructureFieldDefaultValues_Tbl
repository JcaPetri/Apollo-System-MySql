-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysEntityStructureFieldDefaultValues_Tbl table
/*Contains the default value of each field or column. When you set a value for a column, if the user do not enter, the system get the value from this table.
The key for each record:
    ID		--> is the uniqueidentifier auto generated.
    IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    DefaultVersionIDn	--> The DefaultVersionIDn is the IDNum of the DefaultVersion, defined in the SysBaseElement_Tbl.
    EntityStructureIDn	--> The EntityStructureIDn is the IDNum of the entity structure. Link with the SysEntityStructure_Tbl.
                            The EntityStructureIDn has a FieldIDn + EntityIDn + MicroserviceIDn unique key.
Common Field/Columns for all tables
    The objective of these are to store critical information for the system and the record history.
        StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
        CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
        LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
        OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
        DateCreated			--> The DateCreated is the record creation datetime UTC.
        DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
        TableHistory		-->	The TableHistory contain then change history of each column.
The table operation:
    After you select the EntityStructure (FieldIDn + EntityIDn + MicroserviceIDn) you need to define this two fields:
        DefaultVersionIDn	--> The DefaultVersionIDn is the IDNum of the DefaultVersion, defined in the SysBaseElement_Tbl.
        FieldDefaultValue	--> The FieldDefaultValue is a value that must be the same DataType of the field defined in the SysEntityStructures_Tbl.
    You can define more than one version. 
    Example: If you have to import some data from two diferent suppliers, you can define two diferent version. 
             In the field supplierIDn, you set the specific number of the supplier.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First Delete the table SysEntityStructureFieldDefaultValues_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced baseelement_tbl Tables:
-- ALTER TABLE `systemsdb`.`baseelement_tbllanguage`  DROP FOREIGN KEY `BaseElementLanguageIDnBel`;

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Second create the SysEntityStructureFieldDefaultValues_Tbl table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysEntityStructureFieldDefaultValues_Tbl
DROP TABLE IF EXISTS `systemsdb`.`SysEntityStructureFieldDefaultValues_Tbl`;

CREATE TABLE `SysEntityStructureFieldDefaultValues_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
      `DefaultVersionIDn` int NOT NULL COMMENT 'The DefaultVersionIDn is the IDNum of the DefaultVersion, defined in the SysBaseElement_Tbl.',
	  `EntityStructureIDn` integer NOT NULL COMMENT 'The EntityStructureIDn is the IDNum of the entity structure. Link with the SysEntityStructure_Tbl.',
      `FieldDefaultValue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The FieldDefaultValue is a value that must be the same type of the field, defined in the SysEntityStructures_Tbl.',
      `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `IDNum_SedPrikey` (`IDNum`) COMMENT 'The sequence SysEntityStructureFieldDefaultValues_Tbl generate the nextval',
	  UNIQUE KEY `ID_SedUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The uniqueidentifier.',
	  UNIQUE KEY `IDNum_SedUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  UNIQUE KEY `IDnDefVerEntStruct_SedUnique` (`DefaultVersionIDn`,`EntityStructureIDn`) COMMENT 'The Default Version must be unique for one EntityStructure.',
	  KEY `ID_SedIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID must always be indexed.',
      KEY `IDNum_SedIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
      KEY `DefVerEntStruct_SedIdx` (`DefaultVersionIDn` ASC, `EntityStructureIDn` ASC) VISIBLE COMMENT 'To optimize the search of one default version for an Entity structure.',
	  CONSTRAINT `DefaultVersionIDn_Rel` FOREIGN KEY (`DefaultVersionIDn`) REFERENCES `systemsdb`.`SysBaseElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE,
	  CONSTRAINT `EntityStructureIDn_Rel` FOREIGN KEY (`EntityStructureIDn`) REFERENCES `systemsdb`.`SysEntityStructures_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the default value of each field or column. When you set a value for a column, if the user do not enter, the system get the value from this table.
The key for each record:
    ID		--> is the uniqueidentifier auto generated.
    IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    DefaultVersionIDn	--> The DefaultVersionIDn is the IDNum of the DefaultVersion, defined in the SysBaseElement_Tbl.
    EntityStructureIDn	--> The EntityStructureIDn is the IDNum of the entity structure. Link with the SysEntityStructure_Tbl.
                            The EntityStructureIDn has a FieldIDn + EntityIDn + MicroserviceIDn unique key.
Common Field/Columns for all tables
    The objective of these are to store critical information for the system and the record history.
        StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
        CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
        LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
        OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
        DateCreated			--> The DateCreated is the record creation datetime UTC.
        DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
        TableHistory		-->	The TableHistory contain then change history of each column.
The table operation:
    After you select the EntityStructure (FieldIDn + EntityIDn + MicroserviceIDn) you need to define this two fields:
        DefaultVersionIDn	--> The DefaultVersionIDn is the IDNum of the DefaultVersion, defined in the SysBaseElement_Tbl.
        FieldDefaultValue	--> The FieldDefaultValue is a value that must be the same DataType of the field defined in the SysEntityStructures_Tbl.
    You can define more than one version. 
    Example: If you have to import some data from two diferent suppliers, you can define two diferent version. 
             In the field supplierIDn, you set the specific number of the supplier.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - SysEntityStructureFieldDefaultValues_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysEntityStructureFieldDefaultValuesBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysEntityStructureFieldDefaultValuesBeforeInsert_Trg` BEFORE INSERT ON `SysEntityStructureFieldDefaultValues_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Define the UniqueIdentifier Value
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - SysEntityStructureFieldDefaultValues_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysEntityStructureFieldDefaultValuesBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysEntityStructureFieldDefaultValuesBeforeUpdate_Trg` BEFORE UPDATE ON `SysEntityStructureFieldDefaultValues_Tbl` FOR EACH ROW BEGIN
	-- Create the function to set the new datetimestamp and the history of the record.
	-- This funtion is used by the SysEntityStructureFieldDefaultValues_Tbl table before update trigger.
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
        IF NEW.DefaultVersionIDn <> OLD.DefaultVersionIDn THEN SET v_TableHistory := OLD.DefaultVersionIDn; ELSE SET v_TableHistory := '†'; END IF;
        IF NEW.EntityStructureIDn <> OLD.EntityStructureIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.EntityStructureIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.FieldDefaultValue <> OLD.FieldDefaultValue THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.FieldDefaultValue); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`SysEntityStructureFieldDefaultValues_Tbl`;
