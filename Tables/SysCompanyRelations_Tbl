-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysCompanyRelations_Tbl table
/*Contains the relations between companies. If you have a economic group in this table can build this structure.
Here you can build the tree of the groups companies using the father/son schema.
IMPORTANT: This type of structure allow you to get a individual or group report.
But this table does not build the internal structure of the company.
  The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    RelationID	--> The ID of the relation (uniqueidentifier). Link with the SysCompanyRelations_Tbl ID Value.
    RelationLevel	--> The level of the relation, all start with the number 1. 
    RelationOrden	--> The Orden inside the level, all level start with the number 1.
    CompanyIDn	--> The CompanyIDn is the IDNum of the Company involved in the relation. Link with the SysBaseElements_Tbl.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First Delete the table SysCompanyRelations_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced SysBaseElements_Tbl Tables:
-- ALTER TABLE `systemsdb`.`SysBaseElements_Tbllanguage`  DROP FOREIGN KEY `BaseElementLanguageIDnBel`;

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Second create the SysCompanyRelations_Tbl table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysCompanyRelations_Tbl
DROP TABLE IF EXISTS `systemsdb`.`SysCompanyRelations_Tbl`;

CREATE TABLE `SysCompanyRelations_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
    `RelationID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID of the relation. Link with the SysCompanyRelations_Tbl ID Value.',
    `RelationLevel` smallint NOT NULL COMMENT 'The level of the relation is a number that start with 1.',
    `RelationOrden` smallint NOT NULL COMMENT 'The Orden inside the level, all level start with the number 1.',
    `CompanyIDn` int NOT NULL COMMENT 'The CompanyIDn is the IDNum of the Company involved in the relation. Link with the SysBaseElements_Tbl.',
	  `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `IDNum_ScrPrikey` (`IDNum`) COMMENT 'The sequence SysCompanyRelations_Tbl generate the nextval',
	  UNIQUE KEY `ID_ScrUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The uniqueidentifier.',
	  UNIQUE KEY `IDNum_ScrUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  KEY `ID_ScrIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID must always be indexed.',
    KEY `IDNum_ScrIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
    KEY `IDRelation_ScrIdx` (`ID` ASC, `RelationID` ASC) VISIBLE COMMENT 'To optimize the search of one Father and Son.',
	  CONSTRAINT `CompanyIDn_ScrRel` FOREIGN KEY (`CompanyIDn`) REFERENCES `systemsdb`.`SysBaseElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the relations between companies. If you have a economic group in this table can build this structure.
Here you can build the tree of the groups companies using the father/son schema.
IMPORTANT: This type of structure allow you to get a individual or group report.
But this table does not build the internal structure of the company.
  The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    RelationID	--> The ID of the relation (uniqueidentifier). Link with the SysCompanyRelations_Tbl ID Value.
    RelationLevel	--> The level of the relation, all start with the number 1. 
    RelationOrden	--> The Orden inside the level, all level start with the number 1.
    CompanyIDn	--> The CompanyIDn is the IDNum of the Company involved in the relation. Link with the SysBaseElements_Tbl.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.';


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - SysCompanyRelations_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysCompanyRelationsBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysCompanyRelationsBeforeInsert_Trg` BEFORE INSERT ON `SysCompanyRelations_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Define the UniqueIdentifier Value
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - SysCompanyRelations_Tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`SysCompanyRelationsBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `SysCompanyRelationsBeforeUpdate_Trg` BEFORE UPDATE ON `SysCompanyRelations_Tbl` FOR EACH ROW BEGIN
	-- Create the function to set the new datetimestamp and the history of the record.
	-- This funtion is used by the SysCompanyRelations_Tbl table before update trigger.
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
    IF NEW.RelationID <> OLD.RelationID THEN SET v_TableHistory := OLD.RelationID; ELSE SET v_TableHistory := '†'; END IF;
    IF NEW.RelationLevel <> OLD.RelationLevel THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.RelationLevel); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.RelationOrden <> OLD.RelationOrden THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.RelationOrden); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.CompanyIDn <> OLD.CompanyIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CompanyIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`SysCompanyRelations_Tbl`;



