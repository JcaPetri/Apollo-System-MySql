-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysRootElements_Tbl table
/*Contains the other element of the system. 
	When you enter the IDNum in this table, you active the element to be used in other microservices. 
	The key for each record:
		ID		--> is the uniqueidentifier auto generated.
		IDNum	--> is the autoincrement number auto generated.
		This table has its own key only for update it. 
		The system don't use this key because, here we only enable the element to a Microservice and BusinessUnit.
	The unique Key is the union of:
		RootElementIDn 		--> the IdNum of the entity
		MicroserviceIDn		--> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices of the BusinessUnit have access to them.
		BusinessUnitIDn		--> the IdNum of the BusinessUnit that the Entity and Microservice belong.
	Example: In the BaseElement_Tbl you have been created all values of the SysContries or SysLangueges, etc. This table is the diccionary and this values can't use it.
			 To make real and enable these values, we must to create a specific table for its. 
			 But if you are going to use only somes record of each tables, is bether have one table with all small tables. This table is called SysRootElement_Tbl.
	Tips:
		The RootElementIDn + MicroserviceIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.
*/


-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First Delete the table SysRootElements_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced baseelement_tbl Tables:
/*
	ALTER TABLE `systemsdb`.`baseelement_tbllanguage`  DROP FOREIGN KEY `BaseElementLanguageIDnBel`;
    ALTER TABLE `systemsdb`.`baseelement_tbllanguage`  DROP FOREIGN KEY `LanguageIDnBel`;
    ALTER TABLE `systemsdb`.`bpmfoutdocumentation`  DROP FOREIGN KEY `DocumentationIDnDc`;
    ALTER TABLE `systemsdb`.`bpmfoutdocumentation`  DROP FOREIGN KEY `LanguageIDnDc`;
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Second create the SysRootElements_Tbl table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysRootElements_Tbl
DROP TABLE IF EXISTS public."SysRootElements_Tbl" CASCADE;

CREATE TABLE `SysRootElements_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
    "RootElementIDn" integer NOT NULL,
    "MicroserviceIDn" integer NOT NULL,
    "BusinessUnitIDn" integer NOT NULL,

`IDName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The IDName is the user-readable code for the selected language.',
	  `IDNameStructureIDn` int NOT NULL COMMENT 'The IDNameStructureIDn is the IDNum of the IDName structure, if the IDName is multivalued, here it refers to the structure.',
	  `ScopeIDn` int NOT NULL COMMENT 'The ScopeIDn is the IdNum of the Scope, the Name must be unique for the scope of application, usually a Table',
	  `BusinessUnitIDn` int NOT NULL COMMENT 'The BusinessUnitIDn is the IdNum of the BusinessUnit to which the IDName is assigned',
	  `LanguageIDn` int NOT NULL COMMENT 'The LanguageIDn is the IdNum of the language in which the Name is defined',
	  `IDCode` int NOT NULL COMMENT 'The IDCode is the unique code of the record for a scope and company.',
	  `DefinitionIDn` int NOT NULL COMMENT 'The DefinitionIDn is the IdNum of the element definition type.',
	  `InformationTypeIDn` int NOT NULL COMMENT 'Then InformationTypeIDn is the IdNum of the type of information that the record represents.',
	  `IDIsUsed` tinyint NOT NULL COMMENT 'The IDIsUsed determines if the registry is used or not.',

	  `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `SrePk_IDNum` (`IDNum`) COMMENT 'The sequence SysRootElements_Tbl generate the nextval',
	  UNIQUE KEY `SreUnique_ID` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier',
	  UNIQUE KEY `IDNum_UNIQUE` (`IDNum`),
	  UNIQUE KEY `SreUnique_IDnRootEleMicroServBusinessUnit` (`RootElementIDn`,`MicroserviceIDn`, `BusinessUnitIDn`) COMMENT 'A CodeId can be unique for a ScopeId and for a BusinessUnitId.',

	  KEY `ID_idx` (`ID`) /*!80000 INVISIBLE */,
      KEY `IDNum_idx` (`IDNum`) /*!80000 INVISIBLE */,
      KEY `BusinessUnitIDn_idx` (`BusinessUnitIDn`),
	  KEY `IDCode_idx` (`IDCode`) /*!80000 INVISIBLE */,
	  KEY `IDIsUsed_idx` (`IDIsUsed`),
	  KEY `IDCompScope_idx` (`BusinessUnitIDn`,`ScopeIDn`)
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the other element of the system. 
	When you enter the IDNum in this table, you active the element to be used in other microservices. 
	The key for each record:
		ID		--> is the uniqueidentifier auto generated.
		IDNum	--> is the autoincrement number auto generated.
		This table has its own key only for update it. 
		The system don't use this key because, here we only enable the element to a Microservice and BusinessUnit.
	The unique Key is the union of:
		RootElementIDn 		--> the IdNum of the entity
		MicroserviceIDn		--> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices of the BusinessUnit have access to them.
		BusinessUnitIDn		--> the IdNum of the BusinessUnit that the Entity and Microservice belong.
	Example: In the BaseElement_Tbl you have been created all values of the SysContries or SysLangueges, etc. This table is the diccionary and this values can't use it.
			 To make real and enable these values, we must to create a specific table for its. 
			 But if you are going to use only somes record of each tables, is bether have one table with all small tables. This table is called SysRootElement_Tbl.
	Tips:
		The RootElementIDn + MicroserviceIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.';

-------------------------------
--------------------------------

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."SysRootElements_Tbl"
    OWNER to postgres;

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the table fields elements
-- 
COMMENT ON TABLE public."SysRootElements_Tbl"
    IS 'Contains the other element of the system. 
	When you enter the IDNum in this table, you active the element to be used in other microservices. 
	The key for each record:
		ID		--> is the uniqueidentifier auto generated.
		IDNum	--> is the autoincrement number auto generated.
		This table has its own key only for update it. 
		The system don't use this key because, here we only enable the element to a Microservice and BusinessUnit.
	The unique Key is the union of:
		RootElementIDn 		--> the IdNum of the entity
		MicroserviceIDn		--> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices of the BusinessUnit have access to them.
		BusinessUnitIDn		--> the IdNum of the BusinessUnit that the Entity and Microservice belong.
	Example: In the BaseElement_Tbl you have been created all values of the SysContries or SysLangueges, etc. This table is the diccionary and this values can't use it.
			 To make real and enable these values, we must to create a specific table for its. 
			 But if you are going to use only somes record of each tables, is bether have one table with all small tables. This table is called SysRootElement_Tbl.
	Tips:
		The RootElementIDn + MicroserviceIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.
';

COMMENT ON COLUMN public."SysRootElements_Tbl"."IDNum"
    IS 'The IDNum is the autoincrement number';

COMMENT ON COLUMN public."SysRootElements_Tbl"."ID"
    IS 'The ID is the uniqueidentifier auto generated V4';

COMMENT ON COLUMN public."SysRootElements_Tbl"."RootElementIDn"
    IS 'The RootElementIDn is the IDNum of the element. Link with the SysBaseElement_Tbl.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."MicroserviceIDn"
    IS 'The MicroserviceIDn is the IDNum of the microservice to which the element belongs. If its value is System all microservices have access to it.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."BusinessUnitIDn"
    IS 'The BusinessUnitIDn is the business unit that the general option fields articles belong.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."StateIDn"
    IS 'The StatedIDn is the IDNum that define if the record is enable or not.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."CreatedByIDn"
    IS 'The CreatedByIDn is the IDNum of the user who created the record.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."LastModifiedByIDn"
    IS 'The LastModifiedByIDn is the IDNum of the last user who modified the record.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."OwnerIDn"
    IS 'The OwnerIDn is the IDNum of the record owner.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."DateCreated"
    IS 'The DateCreated is the record creation datetime UTC.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."DateTimeStamp"
    IS 'The DateTimeStamp is the datetime UTC of the last modification.';

COMMENT ON COLUMN public."SysRootElements_Tbl"."TableHistory"
    IS 'The TableHistory contain then change history of each column.';

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the constraint elements
-- 
COMMENT ON CONSTRAINT "SrePk_IDNum" ON public."SysRootElements_Tbl"
    IS 'The sequence SysRootElements_seq generate the nextval';

COMMENT ON CONSTRAINT "SreUnique_ID" ON public."SysRootElements_Tbl"
    IS 'Is the uniqueidentifier';

COMMENT ON CONSTRAINT "SreUnique_IDnRootEleMicroServBusinessUnit" ON public."SysRootElements_Tbl"
    IS 'A rootelement can be unique for an microservice and a business unit.';

-- #########################################################################################################################################################################################
-- Second create the trigger before insert
--	Step 1: create the function before insert
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysRootElementsBeforeInsert_Tfnc()
DROP FUNCTION IF EXISTS public."SysRootElementsBeforeInsert_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysRootElementsBeforeInsert_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."DateCreated" IS NULL THEN 
		NEW."DateCreated" := CURRENT_TIMESTAMP;
	END IF;
RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysRootElementsBeforeInsert_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysRootElementsBeforeInsert_Tfnc"()
    IS 'Create the function to set de current timestamp for the datecreated field.
	This funtion is used by the SysRootElements_Tbl table before insert trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before insert in the SysRootElements table
-- Trigger: SysRootElementsBeforeInsert_Trg
DROP TRIGGER IF EXISTS "SysRootElementsBeforeInsert_Trg" ON public."SysRootElements_Tbl" CASCADE;

CREATE TRIGGER "SysRootElementsBeforeInsert_Trg"
    BEFORE INSERT
    ON public."SysRootElements_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysRootElementsBeforeInsert_Tfnc"();

COMMENT ON TRIGGER "SysRootElementsBeforeInsert_Trg" ON public."SysRootElements_Tbl"
    IS 'Set the SysRootElementsBeforeInsert_Tfnc function, that makes datetime UTC of the DateCreated field';

-- #########################################################################################################################################################################################
-- Third create the trigger before update
--	Step 1: create the function before update
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysRootElementsBeforeUpdate_Tfnc()
DROP FUNCTION IF EXISTS public."SysRootElementsBeforeUpdate_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysRootElementsBeforeUpdate_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
	v_TableHistory text;
	v_TableHistoryOld text;
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the DateTimeStamp
	NEW."DateTimeStamp" := CURRENT_TIMESTAMP;
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."TableHistory" = 'SetNull' THEN 
		NEW."TableHistory" := NULL;
	ELSEIF NEW."TableHistory" = 'SetOff' THEN
		NEW."TableHistory" := OLD."TableHistory";
	ELSE
		v_TableHistoryOld := OLD."TableHistory";
		v_TableHistory = '';
		IF NEW."RootElementIDn" <> OLD."RootElementIDn" THEN v_TableHistory := OLD."RootElementIDn"; ELSE v_TableHistory := '†'; END IF;
		IF NEW."MicroserviceIDn" <> OLD."MicroserviceIDn" THEN v_TableHistory := OLD."MicroserviceIDn"; ELSE v_TableHistory := '†'; END IF;
		IF NEW."BusinessUnitIDn" <> OLD."BusinessUnitIDn" THEN v_TableHistory := OLD."BusinessUnitIDn"; ELSE v_TableHistory := '†'; END IF;
		IF NEW."StateIDn" <> OLD."StateIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."StateIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."CreatedByIDn" <> OLD."CreatedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."CreatedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."LastModifiedByIDn" <> OLD."LastModifiedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."LastModifiedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."OwnerIDn" <> OLD."OwnerIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."OwnerIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN v_TableHistory := CONCAT(v_TableHistory,'†',NEW."DateCreated"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."DateTimeStamp" <> OLD."DateTimeStamp" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."DateTimeStamp"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			NEW."TableHistory" := v_TableHistory;
		ELSE
			NEW."TableHistory" := CONCAT(v_TableHistory,'‡',v_TableHistoryOld);
		END IF;
		
	END IF;
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysRootElementsBeforeUpdate_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysRootElementsBeforeUpdate_Tfnc"()
    IS 'Create the function to set the new datetimestamp and the history of the record.
	This funtion is used by the SysRootElements_Tbl table before update trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before update in the SysRootElements_Tbl table
-- Trigger: SysRootElementsBeforeUpdate_Trg
DROP TRIGGER IF EXISTS "SysRootElementsBeforeUpdate_Trg" ON public."SysRootElements_Tbl" CASCADE;

CREATE TRIGGER "SysRootElementsBeforeUpdate_Trg"
    BEFORE UPDATE 
    ON public."SysRootElements_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysRootElementsBeforeUpdate_Tfnc"();

COMMENT ON TRIGGER "SysRootElementsBeforeUpdate_Trg" ON public."SysRootElements_Tbl"
    IS 'Set the SysRootElementsBeforeUpdate_Tfnc function, that makes datetime UTC and the record History.';
