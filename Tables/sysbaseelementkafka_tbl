-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the sysbaseelementkafka_tbl table
/*
Contains the relation between the sysbaseelement_tbl and the Kafka Topics, to make updated all the microservices.
With this table the software manages what elements will be in each microservice.
In the sysbaseelement_tbl is created the KaftaTopic in the scope and inside this scope you create the topics.
In this table is assigned the baseelement_idn to a specific Topic. 
  ***You can assign one element to more than one Topic.***
After you create or update and element, the system get the data of this table to know wich queues must be updated.
If baseelement_tbl is a Scope, all elements it contains must be updated.
    Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl).
The key for each row/record:
    baseelementkafka_idnum --> is the autoincrement number auto generated.
    baseelementkafka_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    baseelement_idn -> the row from the sysbaseelement_tbl, that recieve the properties.
    kafkatopic_idn -> the table of the Kafka of a queue Topic are in the sysbaseelement_tbl.
        unique = One KafkaTopicIDn must be unique for each baseelement_tbl.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table sysbaseelementkafka_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE systemsdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced sysbaseelementkafka_tbl Tables:
-- ALTER TABLE `systemsdb`.`SysMicroservices_tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `systemsdb`.`sysbaseelementkafka_tbl`;

CREATE TABLE `systemsdb`.`sysbaseelementkafka_tbl` (
    `baseelementkafka_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The baseelementkafka_idnum is the autoincrement number', 
    `baseelementkafka_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The baseelementkafka_id is the uniqueidentifier auto generated V4', 
    `baseelement_idn` integer NOT NULL COMMENT 'The baseelement_idn is the row of the table sysbaseelement_tbl who receive the new property.',
    `kafkatopic_idn` int NOT NULL COMMENT 'The kafkatopic_IDn is the idnum of a queue in the Kafka Topics Table.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state defined.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `id_sbkpkey` (`baseelementkafka_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `id_sbkpuni` (`baseelementkafka_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `baseelementproperty_sbkpuni` (`baseelementkafka_idnum`) COMMENT 'The baseelementkafka_idnum must be unique.',
    UNIQUE KEY `baseelementpropcell_sbkpuni` (`baseelement_idn`, `kafkatopic_idn`) COMMENT 'The kafkatopic_idn must be unique for a baseelement_idn.',
    KEY `id_sbkidx` (`baseelementkafka_id`) /*!80000 INVISIBLE */ COMMENT 'The baseelementkafka_id alway must be indexed.',
    KEY `baseelementkafka_idnum_sbkidx` (`baseelementkafka_idnum`) /*!80000 INVISIBLE */ COMMENT 'The baseelementkafka_idnum must always be indexed.',
    KEY `baseelemtablefield_sbkidx` (`baseelement_idn` ASC, `kafkatopic_idn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Tables.',
    CONSTRAINT `baseelementidn_sbkrel` FOREIGN KEY (`baseelement_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `tablefieldidn_sbkrel` FOREIGN KEY (`kafkatopic_idn`) REFERENCES `systemsdb`.`sysbaseelement_tbl` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the relation between the sysbaseelement_tbl and the Kafka Topics, to make updated all the microservices.
With this table the software manages what elements will be in each microservice.
In the sysbaseelement_tbl is created the KaftaTopic in the scope and inside this scope you create the topics.
In this table is assigned the baseelement_idn to a specific Topic. 
  ***You can assign one element to more than one Topic.***
After you create or update and element, the system get the data of this table to know wich queues must be updated.
If baseelement_tbl is a Scope, all elements it contains must be updated.
    Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl).
The key for each row/record:
    baseelementkafka_idnum --> is the autoincrement number auto generated.
    baseelementkafka_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    baseelement_idn -> the row from the sysbaseelement_tbl, that recieve the properties.
    kafkatopic_idn -> the table of the Kafka of a queue Topic are in the sysbaseelement_tbl.
        unique = One KafkaTopicIDn must be unique for each baseelement_tbl.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - sysbaseelementkafka_tbl
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysbaseelementkafkaBeforeInsert_Trg`;
DELIMITER $$
USE `systemsdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysbaseelementkafkaBeforeInsert_Trg` BEFORE INSERT ON `sysbaseelementkafka_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
    IF new.baseelementkafka_id IS NULL OR new.baseelementkafka_id = '' THEN
        SET new.baseelementkafka_id = uuid();    -- Set the UniqueIdentifier Value
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - sysbaseelementkafka_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE systemsdb;
DROP TRIGGER IF EXISTS `systemsdb`.`sysbaseelementkafkaBeforeUpdate_Trg`;
DELIMITER $$
USE `systemsdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `sysbaseelementkafkaBeforeUpdate_Trg` BEFORE UPDATE ON `sysbaseelementkafka_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- baseelementkafka_idnum, this value never changes.
        -- baseelementkafka_id, this value never changes.
        IF NEW.baseelement_idn <> OLD.baseelement_idn THEN SET v_tablehistory := OLD.baseelement_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.kafkatopic_idn <> OLD.kafkatopic_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.kafkatopic_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `systemsdb`.`sysbaseelementkafka_tbl`;
